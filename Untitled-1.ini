<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Solar System ‚Ä¢ A-Frame + Three.js</title>
    <meta name="description" content="Solar system with starfield background" />
    <script src="https://aframe.io/releases/1.5.0/aframe.min.js"></script>
    <script>
      AFRAME.registerComponent('solar-system', {
        init: function () {
          const scene = this.el.sceneEl.object3D;

          // üåå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡∏£‡∏∞‡∏¢‡∏¥‡∏ö‡∏£‡∏∞‡∏¢‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
          const starCount = 2000;
          const starGeo = new THREE.BufferGeometry();
          const starPositions = new Float32Array(starCount * 3);
          for (let i = 0; i < starCount * 3; i++) {
            starPositions[i] = (Math.random() - 0.5) * 400; // ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏Å
          }
          starGeo.setAttribute('position', new THREE.BufferAttribute(starPositions, 3));
          const starMat = new THREE.PointsMaterial({
            color: 0xffffff,
            size: 0.6,
            transparent: true,
            opacity: 0.8
          });
          const stars = new THREE.Points(starGeo, starMat);
          scene.add(stars);

          // ‚òÄÔ∏è ‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
          const sunGeo = new THREE.SphereGeometry(1, 32, 32);
          const sunMat = new THREE.MeshStandardMaterial({
            emissive: new THREE.Color(0xffcc00),
            emissiveIntensity: 1.8,
            color: 0x000000
          });
          const sun = new THREE.Mesh(sunGeo, sunMat);
          scene.add(sun);

          // üåç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
          const planetsData = [
            { name: "Mercury", radius: 2, size: 0.2, color: 0xaaaaaa, speed: 0.02 },
            { name: "Venus", radius: 3, size: 0.3, color: 0xffcc66, speed: 0.015 },
            { name: "Earth", radius: 4, size: 0.35, color: 0x3399ff, speed: 0.01 },
            { name: "Mars", radius: 5, size: 0.25, color: 0xff6633, speed: 0.008 },
            { name: "Jupiter", radius: 7, size: 0.8, color: 0xffcc99, speed: 0.006 },
            { name: "Saturn", radius: 9, size: 0.7, color: 0xffcc00, speed: 0.005 },
            { name: "Uranus", radius: 11, size: 0.5, color: 0x99ccff, speed: 0.004 },
            { name: "Neptune", radius: 13, size: 0.45, color: 0x3366ff, speed: 0.003 }
          ];

          this.planets = [];

          planetsData.forEach((p) => {
            const geo = new THREE.SphereGeometry(p.size, 32, 32);
            const mat = new THREE.MeshStandardMaterial({ color: p.color });
            const planet = new THREE.Mesh(geo, mat);

            planet.userData = { name: p.name, radius: p.radius, speed: p.speed, angle: Math.random() * Math.PI * 2 };
            scene.add(planet);

            // üåï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡∏ß‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å
            if (p.name === "Earth") {
              const moonGeo = new THREE.SphereGeometry(0.1, 32, 32);
              const moonMat = new THREE.MeshStandardMaterial({ color: 0xdddddd });
              const moon = new THREE.Mesh(moonGeo, moonMat);
              moon.userData = { radius: 0.6, speed: 0.05, angle: 0 };
              planet.add(moon);
              planet.userData.moon = moon;
            }

            // üí´ ‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏î‡∏≤‡∏ß‡πÄ‡∏™‡∏≤‡∏£‡πå
            if (p.name === "Saturn") {
              const ringGeo = new THREE.RingGeometry(1.0, 1.8, 64);
              const ringMat = new THREE.MeshBasicMaterial({
                color: 0xffdd99,
                side: THREE.DoubleSide,
                transparent: true,
                opacity: 0.7
              });
              const ring = new THREE.Mesh(ringGeo, ringMat);
              ring.rotation.x = Math.PI / 2;
              planet.add(ring);
            }

            this.planets.push(planet);
          });

          // üí° ‡πÅ‡∏™‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
          const light = new THREE.PointLight(0xffffff, 2, 200);
          scene.add(light);

          this.sun = sun;
          this.light = light;
          this.stars = stars;
        },

        tick: function (time, delta) {
          // ‡∏´‡∏°‡∏∏‡∏ô‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
          this.sun.rotation.y += 0.001;

          // ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡∏ß‡∏á
          this.planets.forEach((planet) => {
            planet.userData.angle += planet.userData.speed;
            const r = planet.userData.radius;
            planet.position.set(Math.cos(planet.userData.angle) * r, 0, Math.sin(planet.userData.angle) * r);
            planet.rotation.y += 0.01;

            if (planet.userData.moon) {
              const moon = planet.userData.moon;
              moon.userData.angle += moon.userData.speed;
              const mr = moon.userData.radius;
              moon.position.set(Math.cos(moon.userData.angle) * mr, 0, Math.sin(moon.userData.angle) * mr);
            }
          });

          // ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
          this.light.position.copy(this.sun.position);

          // ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏ä‡πâ‡∏≤‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
          this.stars.rotation.y += 0.0005;
        }
      });
    </script>
  </head>

  <body>
    <a-scene background="color: black" solar-system>
      <a-entity
        camera="fov: 60; near: 0.1; far: 300"
        orbit-controls="target: 0 0 0; minDistance: 2; maxDistance: 100; initialPosition: 20 10 20; enableDamping: true; rotateSpeed: 0.7"
      ></a-entity>

      <!-- ‡πÅ‡∏™‡∏á‡∏£‡∏≠‡∏ö‡πÜ -->
      <a-entity light="type: ambient; color: #222"></a-entity>
    </a-scene>
  </body>
</html>
